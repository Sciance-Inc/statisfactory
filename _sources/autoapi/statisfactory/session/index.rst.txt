:py:mod:`statisfactory.session`
===============================

.. py:module:: statisfactory.session


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base_session/index.rst
   session/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   statisfactory.session.Scoped
   statisfactory.session.BaseSession
   statisfactory.session.Session




.. py:class:: Scoped(*args, **kwargs)

   Thread-safe session getter.

   .. py:attribute:: _sessions
      

      

   .. py:method:: get_session(self)


   .. py:method:: set_session(cls, session)
      :classmethod:



.. py:class:: BaseSession(*, root_folder: Optional[str] = None)

   Bases: :py:obj:`statisfactory.logger.MixinLogable`

   Base class for all Session objects.
   The Session is the entry point of a Statisfactory application

   The session loads the Statisfactory configuration file and executes the registered hooks.

   The class exposes :
       * Getter to the ``settings``, parsed during the class instanciation
       * Getters to pipelines definitions and configurations, if any.
       * A decorator : hook_post_init. To help the user registering is own extention.

   The session expose a ``_`` attributes, for the user to register his own datas.

   Implementation details:
   * The class is actually never instanciated. It serves as an abstract classe to be injected somehow in the hierarchy of the dynamically defined Session.
   * The class by itself does not do much, but delegates must of the work the the hooks.
   * The hooks can be used to develop plugins : such as an integration to mlflow, the instanciation of a Spark session.
   * The ``_`` attribute schould be used to store user defined custom extension

   .. py:attribute:: _hooks
      :annotation: = []

      

   .. py:method:: __enter__(self)

      Push the Session on top of the thread-safe stack


   .. py:method:: __exit__(self, exception_type, exception_value, exception_traceback)

      Remove the topmost Session of the thread safe stack


   .. py:method:: root(self) -> pathlib.Path
      :property:

      Getter for the Root path of the project


   .. py:method:: settings(self) -> dynaconf.Dynaconf
      :property:

      Getter for the session's base setting.


   .. py:method:: catalog(self) -> statisfactory.IO.Catalog
      :property:

      Getter for the session's catalog.


   .. py:method:: pipelines_definitions(self)
      :property:

      Getter for the session's pipelines definitions.


   .. py:method:: parameters(self)
      :property:

      Getter for the session's parameters


   .. py:method:: aws_session(self) -> boto3.Session
      :property:

      Getter for the AWS client

      Returns:
          boto3.Session: The session configured via the initiaition hook.


   .. py:method:: git(self) -> pygit2.Repository
      :property:

      Getter for the Git repository the session belongs to.


   .. py:method:: lakefs_client(self) -> lakefs_client.client.LakeFSClient
      :property:

      Getter for the AWS client
      Returns:
          The lakeFS configured via the initiaition hook.


   .. py:method:: lakefs_repo(self)
      :property:

      Return the LakeFS repository's pointer.


   .. py:method:: hook_post_init(cls, last=True) -> Callable
      :classmethod:

      Register a `callable_` to be executed after the session instanciation.



.. py:class:: Session

   Instanciate the Session object.
   The Session class used is generaly the `statisfactory.session.base_session`.

   The user can specify a custom session by specifiying the following configuration in the `pyproject.toml` file :

   ```toml
   [tool.statisfactory.session_factory]
   module = 'session.custom_session'
   factory = 'MySession'
   ```

   Where `module` is the name of a module inside the project and factory is the name of a class from that module.

   The Session is the entry point of a Statisfactory application
   The session loads the Statisfactory configuration file and executes the registered hooks.

   .. py:method:: get_active_session()
      :staticmethod:

      Get the Session, currently on the top of the stack.
      Must be called from a `with` statement



