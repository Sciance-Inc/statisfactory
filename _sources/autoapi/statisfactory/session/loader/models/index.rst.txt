:py:mod:`statisfactory.session.loader.models`
=============================================

.. py:module:: statisfactory.session.loader.models

.. autoapi-nested-parse::

   implements models serialization for Pipelines definitions and Configuration files



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   statisfactory.session.loader.models.PipelineDefinition
   statisfactory.session.loader.models._PipelinesDefinitionsShema




.. py:class:: PipelineDefinition

   Represents the definition of a Pipeline

   .. py:attribute:: operators
      :annotation: :List[str]

      

   .. py:attribute:: config
      :annotation: :Optional[Mapping[str, Any]]

      

   .. py:method:: from_file(file: str)
      :staticmethod:

      Build a statisfactory config from a file.



.. py:class:: _PipelinesDefinitionsShema(*, only: Optional[marshmallow.types.StrSequenceOrSet] = None, exclude: marshmallow.types.StrSequenceOrSet = (), many: bool = False, context: Optional[Dict] = None, load_only: marshmallow.types.StrSequenceOrSet = (), dump_only: marshmallow.types.StrSequenceOrSet = (), partial: Union[bool, marshmallow.types.StrSequenceOrSet] = False, unknown: Optional[str] = None)

   Bases: :py:obj:`marshmallow.Schema`

   Base schema class with which to define custom schemas.

   Example usage:

   .. code-block:: python

       import datetime as dt
       from dataclasses import dataclass

       from marshmallow import Schema, fields


       @dataclass
       class Album:
           title: str
           release_date: dt.date


       class AlbumSchema(Schema):
           title = fields.Str()
           release_date = fields.Date()


       album = Album("Beggars Banquet", dt.date(1968, 12, 6))
       schema = AlbumSchema()
       data = schema.dump(album)
       data  # {'release_date': '1968-12-06', 'title': 'Beggars Banquet'}

   :param only: Whitelist of the declared fields to select when
       instantiating the Schema. If None, all fields are used. Nested fields
       can be represented with dot delimiters.
   :param exclude: Blacklist of the declared fields to exclude
       when instantiating the Schema. If a field appears in both `only` and
       `exclude`, it is not used. Nested fields can be represented with dot
       delimiters.
   :param many: Should be set to `True` if ``obj`` is a collection
       so that the object will be serialized to a list.
   :param context: Optional context passed to :class:`fields.Method` and
       :class:`fields.Function` fields.
   :param load_only: Fields to skip during serialization (write-only fields)
   :param dump_only: Fields to skip during deserialization (read-only fields)
   :param partial: Whether to ignore missing fields and not require
       any fields declared. Propagates down to ``Nested`` fields as well. If
       its value is an iterable, only missing fields listed in that iterable
       will be ignored. Use dot delimiters to specify nested fields.
   :param unknown: Whether to exclude, include, or raise an error for unknown
       fields in the data. Use `EXCLUDE`, `INCLUDE` or `RAISE`.

   .. versionchanged:: 3.0.0
       `prefix` parameter removed.

   .. versionchanged:: 2.0.0
       `__validators__`, `__preprocessors__`, and `__data_handlers__` are removed in favor of
       `marshmallow.decorators.validates_schema`,
       `marshmallow.decorators.pre_load` and `marshmallow.decorators.post_dump`.
       `__accessor__` and `__error_handler__` are deprecated. Implement the
       `handle_error` and `get_attribute` methods instead.

   .. py:attribute:: operators
      

      

   .. py:attribute:: config
      

      

   .. py:method:: make_PipelinesDefinitions(self, data, **kwargs)



