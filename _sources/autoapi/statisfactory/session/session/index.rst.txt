:py:mod:`statisfactory.session.session`
=======================================

.. py:module:: statisfactory.session.session

.. autoapi-nested-parse::

   Implements the single entry point to a Statisfactory application



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   statisfactory.session.session._SessionMaker
   statisfactory.session.session._AbstractSessionMaker
   statisfactory.session.session.Session




.. py:class:: _SessionMaker

   Bases: :py:obj:`type`

   A metaclass to dynamically select the appropriate bases for the Session object.
   The custom base to inject inplace of the statisfactory.session.BaseSession can be set through the pyproject.toml file

   .. py:method:: __call__(cls, root_folder=None)

      Return a new Session class type to be used to instanciate Sessions.
      The new class inherits from the user defined one (if provide.)



.. py:class:: _AbstractSessionMaker

   Bases: :py:obj:`_SessionMaker`, :py:obj:`abc.ABCMeta`

   BaseSession is an Abtract class. It's metaclass is ABC.
   Session schould have a _SessioNaker metaclass.
   The both metaclass conflict, since pyhton does not now wich one of the metaclasses it shcould be using.
   To solve the conflict, I manually create a Metaclass that inherits from both the ABCMeta metaclass and the _SessionMaker


.. py:class:: Session

   Instanciate the Session object.
   The Session class used is generaly the `statisfactory.session.base_session`.

   The user can specify a custom session by specifiying the following configuration in the `pyproject.toml` file :

   ```toml
   [tool.statisfactory.session_factory]
   module = 'session.custom_session'
   factory = 'MySession'
   ```

   Where `module` is the name of a module inside the project and factory is the name of a class from that module.

   The Session is the entry point of a Statisfactory application
   The session loads the Statisfactory configuration file and executes the registered hooks.

   .. py:method:: get_active_session()
      :staticmethod:

      Get the Session, currently on the top of the stack.
      Must be called from a `with` statement



