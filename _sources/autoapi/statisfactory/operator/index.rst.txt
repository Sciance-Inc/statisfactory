:py:mod:`statisfactory.operator`
================================

.. py:module:: statisfactory.operator


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   pipeline/index.rst
   utils/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   annotations/index.rst
   craft/index.rst
   mixinHookable/index.rst
   scoped/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   statisfactory.operator._Craft
   statisfactory.operator.Pipeline
   statisfactory.operator.Scoped



Functions
~~~~~~~~~

.. autoapisummary::

   statisfactory.operator.Craft



.. py:function:: Craft()

   Make a new _Craft


.. py:class:: _Craft(callable: Callable)

   Bases: :py:obj:`statisfactory.operator.scoped.Scoped`, :py:obj:`statisfactory.operator.mixinHookable.MixinHookable`, :py:obj:`statisfactory.operator.utils.MergeableInterface`, :py:obj:`statisfactory.logger.MixinLogable`

   Craft wraps a task and take care of data retrieval from / storage to the catalogue.

   .. py:attribute:: _artifacts_annotation
      

      

   .. py:method:: _input_to_annotations(self, inputs) -> Tuple[statisfactory.operator.annotations.Annotation, Ellipsis]

      Convert a Python's callable annotation, as returned by Signature to a list of SElement


   .. py:method:: _output_to_annotation(self, inputs) -> Tuple[statisfactory.operator.annotations.Annotation, Ellipsis]

      Convert a Python's callable return value to a list of SElement.


   .. py:method:: name(self) -> str
      :property:

      Get the name of the craft


   .. py:method:: requires(self) -> Tuple[str, Ellipsis]
      :property:

      Return the name of the volatiles and artifact required by the craft


   .. py:method:: produces(self) -> Tuple[str, Ellipsis]
      :property:

      Return the names of the volatiles and artifacts produced by the Craft.


   .. py:method:: output_annotations(self) -> Tuple[statisfactory.operator.annotations.Annotation, Ellipsis]
      :property:

      Returns the full annotations of the items returned by the craft


   .. py:method:: input_annotations(self) -> Tuple[statisfactory.operator.annotations.Annotation, Ellipsis]
      :property:

      Returns the full annotations of the items ingested by the craft.


   .. py:method:: _parse_args(self, context: Mapping, volatiles_mapping: Mapping) -> Tuple[Dict[str, Any], Dict[str, Any]]

      Parse the Craft's arguments against it's signature


   .. py:method:: __call__(self, volatiles_mapping: Union[Mapping[str, Any], None] = None, **kwargs)

      Implements the call protocole for the Craft wrapper.
      Load and save the Artifact for the undelryaing callable.
      Defers the call to the underlying artifact.

      Args:
          volatiles_mapping: A mappping of volatiles objects, computed before the craft execution
          kwargs: variadic keywrods arguments to be defered to the underlaying callable.


   .. py:method:: __copy__(self) -> _Craft

      Implements the shallow copy protocol for the Craft.

      Return a craft with a reference to a copied catalog, so that the context can be independtly updated.


   .. py:method:: _save_artifacts(self, *, output, **context) -> Union[Mapping, None]

      Extract and save the artifact of an output

      Args:
          out (Dict): the dictionnary to extract artifacts from.


   .. py:method:: __add__(self, visitor: statisfactory.operator.utils.MergeableInterface)

      Combine two crafts into a pipeline.
      Implements the accept part of the visitor pattern.

      Args:
          visitor (MergeableInterface): the craft / pipeline to combine


   .. py:method:: visit_craft(self, craft: _Craft)

      Combine two crafts into a pipeline

      Args:
          craft (Craft): the other craft to add


   .. py:method:: visit_pipeline(self, pipeline: statisfactory.operator.pipeline.Pipeline)

      Add the craft in last position to the visiting pipeline



.. py:class:: Pipeline(*, name: str = 'noName', tags: Optional[List[str]] = None)

   Bases: :py:obj:`statisfactory.operator.scoped.Scoped`, :py:obj:`statisfactory.operator.mixinHookable.MixinHookable`, :py:obj:`statisfactory.operator.utils.MergeableInterface`, :py:obj:`statisfactory.logger.MixinLogable`

   Implements a way to combine crafts and pipeline togetger

   .. py:method:: tags(self) -> Optional[List[str]]
      :property:

      Returns the tags of the pipeline.


   .. py:method:: name(self)
      :property:

      Pipeline's name getter.


   .. py:method:: crafts(self) -> List[statisfactory.operator.craft._Craft]
      :property:

      Crafts getter


   .. py:method:: plot(self)

      Display the graph.


   .. py:method:: __add__(self, visitor: statisfactory.operator.utils.MergeableInterface) -> Pipeline

      Add a Mergeable to the pipeline.
      Implements the accept part of the visitor pattern.


   .. py:method:: visit_craft(self, craft) -> Pipeline

      Insert the given craft in the first position of the pipeline.


   .. py:method:: visit_pipeline(self, pipeline: Pipeline)

      Update self by adding the crafts from 'pipeline'.

      Args:
          pipeline (Pipeline): the pipeline to update and return


   .. py:method:: __str__(self)

      Implements the print method to display the pipeline


   .. py:method:: __call__(self, **shared) -> Dict[str, Any]

      Concretely run a Pipeline with two Mapping of parameters.

      Args:
          kwargs (Optional[Dict[str, any]]): An optionnal mapping containings configuration to be shared and namespaced configuration to be dispatched to the craft.The __call__ method uses the FQN of a craft to accordingly dispatch the configurations.

      Returns:
          Dict[str, Any]: the final transient state resultuing from the craft application



.. py:class:: Scoped(*args, **kwargs)

   Thread-safe session getter.

   .. py:attribute:: _sessions
      

      

   .. py:method:: get_session(self)


   .. py:method:: set_session(cls, session)
      :classmethod:



