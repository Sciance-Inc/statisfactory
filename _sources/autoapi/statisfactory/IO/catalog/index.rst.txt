:py:mod:`statisfactory.IO.catalog`
==================================

.. py:module:: statisfactory.IO.catalog

.. autoapi-nested-parse::

   Implements the single entry point to the datasources



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   statisfactory.IO.catalog.Catalog




.. py:class:: Catalog(*, path: pathlib.Path, session: statisfactory.session.BaseSession = None)

   Bases: :py:obj:`statisfactory.logger.MixinLogable`

   Catalog represent a loadable / savable set of dataframes living locally or in far, far aways distributed system.

   .. py:method:: artifacts(self)
      :property:


   .. py:method:: __str__(self)

      Show all artifacts entries


   .. py:method:: __contains__(self, name: str) -> bool

      Check if the given name is an artifact


   .. py:method:: _get_artifact(self, name: str) -> statisfactory.models.models.Artifact

      Retrieve the FIRST artifact matching the given name currently living in the catalog.


   .. py:method:: _get_interactor(self, artifact: statisfactory.models.models.Artifact) -> Callable

      Retrieve the interactor matchin the type of the artifact.


   .. py:method:: load(self, name: str, **context) -> pandas.DataFrame

      Load an asset from the catalogue.
      A context can be provided through named variadic args.
      if a context is provided, the update of the context won't raised any error

      Args:
          name (str): the name of the artifact to load.


   .. py:method:: save(self, name: str, asset: Any, **context)

      Save the asset using the artifact name.
      A context can be provided through named variadic args.
      if a context is provided, the update of the context won't raised any error

      Args:
          name (str): the name of the arteface
          asset (Any): the underlying artifact to store


   .. py:method:: __add__(self, other: Any)

      Implements the visitor pattern for the catalog

      Args:
          other (Any): The right object to add


   .. py:method:: visit_catalog(self, other: Catalog) -> Catalog

      Implements the visitor pattern for the catalog. Combining two catalogs results in a merged catalog.

      Args:
          other (Catalog): The other catalogi to combine with

      Raise:
          Errors.E033: if two artifacts keys collide.



