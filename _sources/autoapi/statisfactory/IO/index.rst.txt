:py:mod:`statisfactory.IO`
==========================

.. py:module:: statisfactory.IO


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   artefacts/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   catalog/index.rst
   models/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   statisfactory.IO.ArtefactInteractor
   statisfactory.IO.MixinInterpolable
   statisfactory.IO.Backend
   statisfactory.IO.Catalog
   statisfactory.IO.Artefact
   statisfactory.IO.Volatile




.. py:class:: ArtefactInteractor(artefact, *args, session: statisfactory.session.Session, **kwargs)

   Bases: :py:obj:`statisfactory.logger.MixinLogable`, :py:obj:`MixinInterpolable`

   Describe the Interactor's interface.
   An interactor wraps the loading and saving operations of a Artefact.
   The user can implements custom interactors. To do so, the user should
   implements the interface desbribes in this class. An artefact and a Session object
   are available when the artefact is called by the Catalog.

   .. py:attribute:: _interactors
      

      

   .. py:method:: __init_subclass__(cls, interactor_name, register: bool = True, **kwargs)
      :classmethod:

      Implement the registration of a child class into the artefact class.
      By doing so, the ArtefactInteractor can be extended to use new interactors without updating the code of the class (Open Close principle)
      See PEP-487 for details.


   .. py:method:: interactors(cls)
      :classmethod:


   .. py:method:: load(self, *args, **kwargs) -> Any
      :abstractmethod:

      Return the underlying asset.


   .. py:method:: save(self, *args, asset: Any, **kwargs)
      :abstractmethod:

      Save the underlying asset.



.. py:class:: MixinInterpolable(*args, **kwargs)

   Implements helpers to interpolate a string

   .. py:method:: _interpolate_string(self, string, **kwargs)

      Interpolate a given string using the provided context



.. py:class:: Backend(session: statisfactory.session.Session, logger_name: str = __name__)

   Bases: :py:obj:`statisfactory.logger.MixinLogable`

   Interface for the low level communication with a service (s3, lakefs...) through the exchange of Bytes
   The backend consume and returns Bytes.

   .. py:attribute:: _backends
      

      

   .. py:method:: __init_subclass__(cls, prefix: str, **kwargs)
      :classmethod:

      Implement the registration of a child class into the backend class.
      By doing so, the Backend can be extended to use new interactors without updating the code of the class (Open Close principle)
      See PEP-487 for details.

      Args:
          prefix (str): The prefix to register the backend under

      Raises:
          Errors.E0201: Raised if the prefix has already a backend registered under,


   .. py:method:: backends(cls: Type[Backend]) -> Dict[str, Type[Backend]]
      :classmethod:

      Getter for the registered backends

      Returns:
          Map[str, Type[Backend]]: A mapping of prefixes associated with their respectives backend.


   .. py:method:: put(self, *, payload: bytes, fragment: urllib.parse.ParseResult)
      :abstractmethod:

      Drop the payload to the service under the 'path' name.

      Args:
          payload (bytes): The bytes representation of the artifact to drop on the backend.
          fragment (ParseResult): The Artefact's path parsed result to use to put the payload to.


   .. py:method:: get(self, *, fragment: urllib.parse.ParseResult) -> bytes
      :abstractmethod:

      Get the payload from the service under the 'path' name.

      Args:
          fragment (ParseResult): The Artefact's path parsed result to use to fetch the payload from.



.. py:class:: Catalog(*, dump: str, session: statisfactory.session.Session = None)

   Bases: :py:obj:`statisfactory.logger.MixinLogable`

   Catalog represent a loadable / savable set of dataframes living locally or in far, far aways distributed system.

   .. py:method:: __str__(self)

      Show all artefacts entries


   .. py:method:: __contains__(self, name: str) -> bool

      Check if the given name is an artefact


   .. py:method:: _get_connector(self, artefact: statisfactory.IO.models.Artefact) -> Union[statisfactory.IO.models.Connector, None]

      Retrieve the connector of an Artefact

      Args:
          artefact (Artefact): the artefact to extract the connector for


   .. py:method:: _get_artefact(self, name: str) -> statisfactory.IO.models.Artefact

      Retrieve the FIRST artefact matching the given name currently living in the catalog.


   .. py:method:: _get_interactor(self, artefact: statisfactory.IO.models.Artefact) -> Callable

      Retrieve the interactor matchin the type of the artefact.


   .. py:method:: load(self, name: str, **context) -> pandas.DataFrame

      Load an asset from the catalogue.
      A context can be provided through named variadic args.
      if a context is provided, the update of the context won't raised any error

      Args:
          name (str): the name of the artefact to load.


   .. py:method:: save(self, name: str, asset: Any, **context)

      Save the asset using the artefact name.
      A context can be provided through named variadic args.
      if a context is provided, the update of the context won't raised any error

      Args:
          name (str): the name of the arteface
          asset (Any): the underlying artefact to store



.. py:class:: Artefact

   Represents an Artefact : the I/O of a statisfactory node.

   .. py:attribute:: name
      :annotation: :str

      

   .. py:attribute:: type
      :annotation: :str

      

   .. py:attribute:: path
      :annotation: :Optional[str]

      

   .. py:attribute:: connector
      :annotation: :Optional[Connector]

      

   .. py:attribute:: query
      :annotation: :Optional[str]

      

   .. py:attribute:: save_options
      :annotation: :Optional[Dict]

      

   .. py:attribute:: load_options
      :annotation: :Optional[Dict]

      

   .. py:method:: __post_init__(self)

      Transform the marshmalling's list-of-dicts to a dict



.. py:class:: Volatile

   Represents data outputed by the Craft but not to be persisted in the catalog

   .. py:attribute:: name
      :annotation: :str

      


