:py:mod:`statisfactory.models.models`
=====================================

.. py:module:: statisfactory.models.models

.. autoapi-nested-parse::

   implements models serialization for Pipelines definitions and Configuration files



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   statisfactory.models.models.Pyproject
   statisfactory.models.models.PipelineDefinition
   statisfactory.models.models.MergeMethod
   statisfactory.models.models.ParametersSetDefinition
   statisfactory.models.models.Volatile
   statisfactory.models.models.Artifact
   statisfactory.models.models.Manifest




.. py:class:: Pyproject

   Bases: :py:obj:`pydantic.BaseModel`

   The parsed configurations from the project.toml

   .. py:class:: Entrypoints

      Bases: :py:obj:`pydantic.BaseModel`

      .. py:attribute:: module
         :annotation: :str

         

      .. py:attribute:: session_factory
         :annotation: :Optional[str]

         


   .. py:attribute:: project_slug
      :annotation: :str

      

   .. py:attribute:: configuration
      :annotation: :str

      

   .. py:attribute:: catalog
      :annotation: :str

      

   .. py:attribute:: sources
      :annotation: :Optional[pathlib.Path]

      

   .. py:attribute:: notebook_target
      :annotation: :Optional[pathlib.Path]

      

   .. py:attribute:: notebook_sources
      :annotation: :Optional[pathlib.Path]

      

   .. py:attribute:: parameters
      :annotation: :Optional[pathlib.Path]

      

   .. py:attribute:: pipelines_definitions
      :annotation: :Optional[pathlib.Path]

      

   .. py:attribute:: entrypoints
      :annotation: :Optional[Pyproject.Entrypoints]

      

   .. py:method:: dict(self)

      Return a dictionary of non None fields

      Returns:
          _type_: _description_



.. py:class:: PipelineDefinition

   Bases: :py:obj:`pydantic.BaseModel`

   Represents the definition of a Pipeline

   .. py:attribute:: tags
      :annotation: :Optional[List[str]]

      

   .. py:attribute:: operators
      :annotation: :List[str]

      


.. py:class:: MergeMethod

   Bases: :py:obj:`enum.Enum`

   Enum for the merge method

   .. py:attribute:: override
      :annotation: = override

      

   .. py:attribute:: recursive_merge
      :annotation: = recursive_merge

      


.. py:class:: ParametersSetDefinition

   Bases: :py:obj:`pydantic.BaseModel`

   Represent a parsed parameter set

   .. py:attribute:: tags
      :annotation: :Optional[List[str]]

      

   .. py:attribute:: from_
      :annotation: :Optional[List[str]]

      

   .. py:attribute:: precedence
      :annotation: :Optional[int]

      

   .. py:attribute:: merge
      :annotation: :Optional[MergeMethod]

      


.. py:class:: Volatile

   Represents data outputed by the Craft but not to be persisted in the catalog

   .. py:attribute:: name
      :annotation: :str

      

   .. py:method:: of(*args) -> List[Volatile]
      :staticmethod:

      Convenient helper to return a tuple of volatile from an iterable of strings.



.. py:class:: Artifact

   Represents an Artifact : the I/O of a statisfactory node.

   .. py:attribute:: name
      :annotation: :str

      

   .. py:attribute:: extra
      :annotation: :Optional[Dict[str, Any]]

      

   .. py:attribute:: save_options
      :annotation: :Optional[Dict[str, Any]]

      

   .. py:attribute:: load_options
      :annotation: :Optional[Dict[str, Any]]

      

   .. py:attribute:: type
      :annotation: :str = 

      

   .. py:method:: of(*args) -> List[Artifact]
      :staticmethod:

      Convenient helper to return a tuple of Artifact from an iterable of strings.



.. py:class:: Manifest

   Represent a minifest : a description of a statisfactory project.
   To be used by DepecheCode to infer dependencies.

   .. py:class:: CraftDefinition

      .. py:class:: CraftIO

         .. py:attribute:: volatiles
            :annotation: :Optional[List[str]]

            

         .. py:attribute:: artifacts
            :annotation: :Optional[List[str]]

            


      .. py:attribute:: module
         :annotation: :str

         

      .. py:attribute:: name
         :annotation: :str

         

      .. py:attribute:: inputs
         :annotation: :Manifest.CraftDefinition.CraftIO

         

      .. py:attribute:: outputs
         :annotation: :Manifest.CraftDefinition.CraftIO

         


   .. py:attribute:: pipelines
      :annotation: :Dict[str, List[List[Manifest.CraftDefinition]]]

      

   .. py:method:: json_dumps(self)


   .. py:method:: json_dump(self, f)



